import java.util.*;

public class Solution {
    public int solution(int[] order){ //order = 실어야하는 순서
        Stack<Integer> stack = new Stack<>();
        int answer = 0;

        //for문 -> 반복횟수 고정, iterate방향 고정?, 블록코드 방향 고정(+break, continue)
        //인덱스 while문 -> 반복횟수 가변, 블록코드 방향 가변 
        int i=0;
        int conItem = 1;
        boolean find = false;
        
        while(i<order.length){ //order에 있는 숫자들 다 처리하면 while문 끝
            // System.out.println(i+"번째 원소 택배 찾는중");
            // System.out.println("현재 conitem : "+i);
            find = false;
            int top;
            try{
                top = stack.peek();    
            }catch(EmptyStackException e){
                top = -1;
            }
            // System.out.println(top);
            
            //기존벨트O
            if (conItem == order[i]){
                answer +=1;
                // System.out.println("answer : "+answer);
                // System.out.println("원래벨트에서 일치한 경우 : "+conItem);
                conItem +=1;
                find =true;

            //elif 보조벨트? -> O -> 택배기사에게 주기
            //                     answer+=1
            //                     stack.pop()
            //                     find true;       
            //                X - 남은거O -> 보조벨트 보내기(stack.push(conItem))
            //                             (다시 원래벨트 확인)
            //                    남은거X(conItem.equals(order.length)) -> 종료(break)
            }else if(order[i] == top){ //보조벨트에 있는경우
                answer +=1;
                // System.out.println("answer : "+answer);
                // System.out.println("보조벨트에서 일치한 경우 : "+conItem);
                stack.pop();
                find =true;
            }else if(order[i] != top){ //보조벨트에도X
                if(conItem!=order.length){ //보조벨트에도X - 아직 남았을때
                    stack.push(conItem);
                    conItem +=1;
                }else if(conItem==order.length){ //보조벨트에도X - 남은거 없을때
                    break;
                }
            }
         
            if(find){ //찾았을때만 order인덱스 올리고, 못 찾았을때는 i고정시켜 원래벨트 다시 확인
                i++;
            }   
        }
        return answer;
    }
}